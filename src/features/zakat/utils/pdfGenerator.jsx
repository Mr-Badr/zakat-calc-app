import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

// Function to format numbers in English
function formatNumberEnglish(num) {
  return new Intl.NumberFormat('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(num);
}

// Translation data for PDF
const pdfTranslations = {
  ar: {
    title: "حاسبة الزكاة المتقدمة",
    subtitle: "نتيجة حساب الزكاة",
    calculationInfo: "معلومات الحساب",
    zakatType: "نوع الزكاة",
    madhab: "المذهب",
    currency: "العملة",
    date: "التاريخ",
    zakatDue: "✅ تجب عليك الزكاة",
    zakatNotDue: "❌ لا تجب عليك الزكاة",
    zakatDueDesc: "المال يبلغ النصاب المقرر شرعاً ووجبت عليك الزكاة",
    zakatNotDueDesc: "المال لا يبلغ النصاب المقرر شرعاً فلا زكاة عليك حالياً",
    zakatAmount: "💰 مبلغ الزكاة الواجب إخراجه",
    zakatRate: "معدل الزكاة",
    nisab: "⚖️ النصاب المقرر شرعاً",
    nisabDesc: "الحد الأدنى لوجوب الزكاة",
    detailedExplanation: "📋 شرح تفصيلي للحساب",
    madhabNote: "📚 ملاحظة فقهية - المذهب",
    islamicEvidence: "📖 الأدلة الشرعية",
    fromQuran: "🕌 من القرآن الكريم",
    fromHadith: "☪️ من السنة النبوية",
    fromConsensus: "🤝 الإجماع الفقهي",
    importantReminder: "⚠️ تذكير مهم قبل إخراج الزكاة",
    reminderPoints: [
      "تأكد من مرور الحول الهجري الكامل (354 يوماً) على المال",
      "أخرج الزكاة للمستحقين الثمانية المذكورين في القرآن الكريم",
      "يُستحب إخراج الزكاة في شهر رمضان أو الأشهر الحرم",
      "احسب الزكاة بالتاريخ الهجري وليس الميلادي",
      "تأكد من صحة الحسابات واستشر أهل العلم عند الشك"
    ],
    generatedBy: "تم إنشاء هذا التقرير بواسطة",
    fileName: "نتيجة_زكاة"
  },
  en: {
    title: "Advanced Zakat Calculator",
    subtitle: "Zakat Calculation Result",
    calculationInfo: "Calculation Information",
    zakatType: "Zakat Type",
    madhab: "Madhab",
    currency: "Currency",
    date: "Date",
    zakatDue: "✅ Zakat is DUE",
    zakatNotDue: "❌ Zakat is NOT due",
    zakatDueDesc: "Your wealth meets the Nisab threshold and Zakat is obligatory",
    zakatNotDueDesc: "Your wealth does not meet the Nisab threshold, so Zakat is not currently due",
    zakatAmount: "💰 Zakat Amount to Pay",
    zakatRate: "Zakat Rate",
    nisab: "⚖️ Islamic Nisab Threshold",
    nisabDesc: "Minimum threshold for Zakat obligation",
    detailedExplanation: "📋 Detailed Calculation Explanation",
    madhabNote: "📚 Jurisprudential Note - Madhab",
    islamicEvidence: "📖 Islamic Evidence",
    fromQuran: "🕌 From the Holy Quran",
    fromHadith: "☪️ From the Prophet's Sunnah",
    fromConsensus: "🤝 From Scholarly Consensus",
    importantReminder: "⚠️ Important Reminder Before Paying Zakat",
    reminderPoints: [
      "Ensure a full Hijri year (354 days) has passed on your wealth",
      "Pay Zakat to the eight categories mentioned in the Quran",
      "It is recommended to pay Zakat in Ramadan or the sacred months",
      "Calculate Zakat using the Hijri calendar, not the Gregorian calendar",
      "Verify calculations and consult qualified Islamic scholars when in doubt"
    ],
    generatedBy: "This report was generated by",
    fileName: "Zakat_Result"
  },
  fr: {
    title: "Calculatrice Zakat Avancée",
    subtitle: "Résultat du Calcul de Zakat",
    calculationInfo: "Informations de Calcul",
    zakatType: "Type de Zakat",
    madhab: "Madhab",
    currency: "Devise",
    date: "Date",
    zakatDue: "✅ La Zakat est DUE",
    zakatNotDue: "❌ La Zakat n'est PAS due",
    zakatDueDesc: "Votre richesse atteint le seuil de Nisab et la Zakat est obligatoire",
    zakatNotDueDesc: "Votre richesse n'atteint pas le seuil de Nisab, donc la Zakat n'est pas actuellement due",
    zakatAmount: "💰 Montant de Zakat à Payer",
    zakatRate: "Taux de Zakat",
    nisab: "⚖️ Seuil de Nisab Islamique",
    nisabDesc: "Seuil minimum pour l'obligation de Zakat",
    detailedExplanation: "📋 Explication Détaillée du Calcul",
    madhabNote: "📚 Note Jurisprudentielle - Madhab",
    islamicEvidence: "📖 Preuves Islamiques",
    fromQuran: "🕌 Du Saint Coran",
    fromHadith: "☪️ De la Sunnah du Prophète",
    fromConsensus: "🤝 Du Consensus des Savants",
    importantReminder: "⚠️ Rappel Important Avant de Payer la Zakat",
    reminderPoints: [
      "Assurez-vous qu'une année Hijri complète (354 jours) s'est écoulée sur votre richesse",
      "Payez la Zakat aux huit catégories mentionnées dans le Coran",
      "Il est recommandé de payer la Zakat pendant le Ramadan ou les mois sacrés",
      "Calculez la Zakat en utilisant le calendrier Hijri, pas le calendrier grégorien",
      "Vérifiez les calculs et consultez des érudits islamiques qualifiés en cas de doute"
    ],
    generatedBy: "Ce rapport a été généré par",
    fileName: "Resultat_Zakat"
  }
};

export async function generateZakatPDF(data) {
  const { result, zakatType, madhab, currency, evidence, language = 'ar' } = data;
  const t = pdfTranslations[language] || pdfTranslations.ar;
  const isRTL = language === 'ar';

  try {
    // Create temporary HTML element for content
    const tempDiv = document.createElement('div');
    tempDiv.style.cssText = `
      position: absolute;
      top: -9999px;
      left: -9999px;
      width: 800px;
      padding: 40px;
      background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
      font-family: ${isRTL ? "'Noto Sans Arabic', 'Amiri', serif" : "'Inter', 'Segoe UI', sans-serif"};
      direction: ${isRTL ? 'rtl' : 'ltr'};
      text-align: ${isRTL ? 'right' : 'left'};
      line-height: 1.6;
      color: #1f2937;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      border-radius: 16px;
    `;

    // Create HTML content with improved design
    tempDiv.innerHTML = `
      <div style="text-align: center; margin-bottom: 40px; background: linear-gradient(135deg, #10b981 0%, #059669 100%); padding: 30px; border-radius: 12px; color: white; box-shadow: 0 10px 15px -3px rgba(16, 185, 129, 0.3);">
        <h1 style="font-size: 32px; margin-bottom: 10px; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          ${t.title}
        </h1>
        <h2 style="font-size: 22px; margin-bottom: 0; font-weight: 500; opacity: 0.9;">
          ${t.subtitle}
        </h2>
        <div style="border-bottom: 3px solid rgba(255,255,255,0.3); margin: 20px auto; width: 200px;"></div>
      </div>

      <div style="background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); padding: 25px; border-radius: 12px; margin-bottom: 30px; border-left: ${isRTL ? 'none' : '5px solid #10b981'}; border-right: ${isRTL ? '5px solid #10b981' : 'none'}; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
        <h3 style="color: #065f46; font-size: 20px; margin-bottom: 20px; font-weight: 700;">
          ${t.calculationInfo}
        </h3>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; font-size: 15px;">
          <div style="background: white; padding: 15px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <strong style="color: #059669;">${t.zakatType}:</strong> ${zakatType}
          </div>
          <div style="background: white; padding: 15px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <strong style="color: #059669;">${t.madhab}:</strong> ${madhab}
          </div>
          <div style="background: white; padding: 15px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <strong style="color: #059669;">${t.currency}:</strong> ${currency}
          </div>
          <div style="background: white; padding: 15px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <strong style="color: #059669;">${t.date}:</strong> <span style="font-family: 'Roboto', monospace; direction: ltr; unicode-bidi: embed;">${new Date().toLocaleDateString('en-US')}</span>
          </div>
        </div>
      </div>

      <div style="background: ${result.isDue ? 'linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%)' : 'linear-gradient(135deg, #fef2f2 0%, #fecaca 100%)'}; padding: 30px; border-radius: 12px; margin-bottom: 30px; border: 3px solid ${result.isDue ? '#16a34a' : '#dc2626'}; text-align: center; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);">
        <div style="font-size: 28px; font-weight: 700; color: ${result.isDue ? '#15803d' : '#dc2626'}; margin-bottom: 15px; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          ${result.isDue ? t.zakatDue : t.zakatNotDue}
        </div>
        <div style="font-size: 16px; color: ${result.isDue ? '#16a34a' : '#dc2626'}; font-weight: 500;">
          ${result.isDue ? t.zakatDueDesc : t.zakatNotDueDesc}
        </div>
      </div>

      ${result.isDue ? `
        <div style="background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%); padding: 30px; border-radius: 12px; margin-bottom: 30px; border-left: ${isRTL ? 'none' : '5px solid #16a34a'}; border-right: ${isRTL ? '5px solid #16a34a' : 'none'}; box-shadow: 0 8px 25px -5px rgba(22, 163, 74, 0.2);">
          <h3 style="color: #15803d; font-size: 22px; margin-bottom: 20px; font-weight: 700; text-align: center;">
            ${t.zakatAmount}
          </h3>
          <div style="text-align: center; font-size: 36px; font-weight: 700; color: #15803d; margin: 20px 0; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <span style="font-family: 'Roboto', monospace; direction: ltr; unicode-bidi: embed;">${formatNumberEnglish(result.amount)}</span> ${currency}
          </div>
          ${result.rate > 0 ? `
            <div style="text-align: center; font-size: 16px; color: #16a34a; font-weight: 600;">
              ${t.zakatRate}: <span style="font-family: 'Roboto', monospace; direction: ltr; unicode-bidi: embed;">${(result.rate * 100).toFixed(1)}%</span>
            </div>
          ` : ''}
        </div>
      ` : ''}

      <div style="background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); padding: 30px; border-radius: 12px; margin-bottom: 30px; border-left: ${isRTL ? 'none' : '5px solid #3b82f6'}; border-right: ${isRTL ? '5px solid #3b82f6' : 'none'}; box-shadow: 0 8px 25px -5px rgba(59, 130, 246, 0.2);">
        <h3 style="color: #1e40af; font-size: 22px; margin-bottom: 20px; font-weight: 700; text-align: center;">
          ${t.nisab}
        </h3>
        <div style="text-align: center; font-size: 32px; font-weight: 700; color: #1e40af; margin: 15px 0; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <span style="font-family: 'Roboto', monospace; direction: ltr; unicode-bidi: embed;">${formatNumberEnglish(result.nisab)}</span> ${currency}
        </div>
        <div style="text-align: center; font-size: 14px; color: #3b82f6; margin-top: 10px; font-weight: 600;">
          ${t.nisabDesc}
        </div>
      </div>

      <div style="background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%); padding: 25px; border-radius: 12px; margin-bottom: 30px; border: 2px solid #e5e7eb; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
        <h3 style="color: #374151; font-size: 20px; margin-bottom: 20px; font-weight: 700;">
          ${t.detailedExplanation}
        </h3>
        <div style="font-size: 16px; color: #4b5563; line-height: 1.8; background: white; padding: 20px; border-radius: 8px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
          ${result.explanation}
        </div>
      </div>

      ${result.madhhabNote ? `
        <div style="background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); padding: 25px; border-radius: 12px; margin-bottom: 30px; border-left: ${isRTL ? 'none' : '5px solid #f59e0b'}; border-right: ${isRTL ? '5px solid #f59e0b' : 'none'}; box-shadow: 0 8px 25px -5px rgba(245, 158, 11, 0.2);">
          <h3 style="color: #92400e; font-size: 20px; margin-bottom: 20px; font-weight: 700;">
            ${t.madhabNote} ${madhab}
          </h3>
          <div style="font-size: 16px; color: #78350f; line-height: 1.8; background: white; padding: 20px; border-radius: 8px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
            ${result.madhhabNote}
          </div>
        </div>
      ` : ''}

      <div style="background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); padding: 30px; border-radius: 12px; margin-bottom: 30px; border: 3px solid #10b981; box-shadow: 0 10px 15px -3px rgba(16, 185, 129, 0.2);">
        <h3 style="color: #065f46; font-size: 22px; margin-bottom: 25px; font-weight: 700; text-align: center;">
          ${t.islamicEvidence}
        </h3>

        ${evidence.quranVerse ? `
          <div style="background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%); padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: ${isRTL ? 'none' : '4px solid #16a34a'}; border-right: ${isRTL ? '4px solid #16a34a' : 'none'}; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
            <h4 style="color: #15803d; font-size: 18px; margin-bottom: 15px; font-weight: 700;">
              ${t.fromQuran}
            </h4>
            <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 12px; font-style: italic; line-height: 1.8; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
              "${evidence.quranVerse.text}"
            </div>
            <div style="font-size: 14px; color: #16a34a; font-weight: 700; text-align: center;">
              ${evidence.quranVerse.reference}
            </div>
          </div>
        ` : ''}

        ${evidence.hadith ? `
          <div style="background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: ${isRTL ? 'none' : '4px solid #3b82f6'}; border-right: ${isRTL ? '4px solid #3b82f6' : 'none'}; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
            <h4 style="color: #1e40af; font-size: 18px; margin-bottom: 15px; font-weight: 700;">
              ${t.fromHadith}
            </h4>
            <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 12px; font-style: italic; line-height: 1.8; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
              "${evidence.hadith.text}"
            </div>
            <div style="font-size: 14px; color: #3b82f6; font-weight: 700; text-align: center;">
              ${evidence.hadith.reference}
            </div>
          </div>
        ` : ''}

        ${evidence.consensus ? `
          <div style="background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%); padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: ${isRTL ? 'none' : '4px solid #8b5cf6'}; border-right: ${isRTL ? '4px solid #8b5cf6' : 'none'}; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
            <h4 style="color: #6b21a8; font-size: 18px; margin-bottom: 15px; font-weight: 700;">
              ${t.fromConsensus}
            </h4>
            <div style="font-size: 16px; color: #7c3aed; line-height: 1.8; background: white; padding: 20px; border-radius: 8px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
              ${evidence.consensus}
            </div>
          </div>
        ` : ''}
      </div>

      ${result.isDue ? `
        <div style="background: linear-gradient(135deg, #fff7ed 0%, #fed7aa 100%); padding: 25px; border-radius: 12px; margin-bottom: 30px; border: 3px solid #f97316; box-shadow: 0 10px 15px -3px rgba(249, 115, 22, 0.2);">
          <h3 style="color: #c2410c; font-size: 20px; margin-bottom: 20px; font-weight: 700;">
            ${t.importantReminder}
          </h3>
          <div style="font-size: 16px; color: #ea580c; line-height: 1.8; background: white; padding: 20px; border-radius: 8px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);">
            ${t.reminderPoints.map(point => `<div style="margin-bottom: 12px; padding-left: 20px; position: relative;">
              <span style="position: absolute; left: 0; color: #f97316;">•</span> ${point}
            </div>`).join('')}
          </div>
        </div>
      ` : ''}

      <div style="text-align: center; margin-top: 50px; padding-top: 30px; border-top: 3px solid #e5e7eb; background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); padding: 30px; border-radius: 12px;">
        <div style="color: #6b7280; font-size: 14px; margin-bottom: 8px; font-weight: 500;">
          ${t.generatedBy}
        </div>
        <div style="color: #10b981; font-size: 20px; font-weight: 700; margin-bottom: 8px;">
          ${t.title}
        </div>
        <div style="color: #6b7280; font-size: 14px; font-weight: 500;">
          <span style="font-family: 'Roboto', monospace; direction: ltr; unicode-bidi: embed;">${new Date().toLocaleString('en-US')}</span>
        </div>
      </div>
    `;

    // Add element to page
    document.body.appendChild(tempDiv);

    // Convert HTML to image with improved settings
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: 800,
      height: tempDiv.scrollHeight,
      logging: false,
      imageTimeout: 15000,
      removeContainer: true
    });

    // Remove temporary element
    document.body.removeChild(tempDiv);

    // Create PDF with improved settings
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true
    });

    const imgData = canvas.toDataURL('image/png', 1.0);
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();

    // Calculate dimensions to maintain aspect ratio
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);

    const scaledWidth = imgWidth * ratio;
    const scaledHeight = imgHeight * ratio;

    // Add image to PDF with multi-page support
    let yPosition = 0;
    const pageHeight = pdfHeight;

    while (yPosition < scaledHeight) {
      const remainingHeight = scaledHeight - yPosition;
      const currentPageHeight = Math.min(pageHeight, remainingHeight);

      if (yPosition > 0) {
        pdf.addPage();
      }

      pdf.addImage(
        imgData,
        'PNG',
        (pdfWidth - scaledWidth) / 2,
        -yPosition,
        scaledWidth,
        scaledHeight
      );

      yPosition += currentPageHeight;
    }

    // Save file with language-specific naming
    const fileName = `${t.fileName}_${zakatType.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating PDF:', error);

    // Create simple PDF as fallback
    try {
      const pdf = new jsPDF();

      pdf.setFontSize(24);
      pdf.setTextColor(16, 185, 129);
      pdf.text(t.title, 20, 30);

      pdf.setFontSize(16);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`${t.zakatType}: ${zakatType}`, 20, 50);
      pdf.text(`${t.madhab}: ${madhab}`, 20, 65);
      pdf.text(`${t.currency}: ${currency}`, 20, 80);
      pdf.text(`${t.date}: ${new Date().toLocaleDateString('en-US')}`, 20, 95);

      pdf.setFontSize(18);
      if (result.isDue) {
        pdf.setTextColor(22, 163, 74);
        pdf.text(t.zakatDue, 20, 120);
        pdf.text(`${t.zakatAmount}: ${formatNumberEnglish(result.amount)} ${currency}`, 20, 140);
      } else {
        pdf.setTextColor(220, 38, 38);
        pdf.text(t.zakatNotDue, 20, 120);
      }

      pdf.setTextColor(0, 0, 0);
      pdf.text(`${t.nisab}: ${formatNumberEnglish(result.nisab)} ${currency}`, 20, 160);

      const fileName = `${t.fileName}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);

    } catch (fallbackError) {
      console.error('Failed to create fallback PDF:', fallbackError);
      throw new Error('Failed to generate PDF file. Please try again.');
    }
  }
}
